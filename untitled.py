def lalala(message):



    if message.text == '–ê–∫—Ç—É–∞–ª—å–Ω—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó üë∑üèª':

        vac = open('vacancy/pierwsza.txt').read()

        inline_markup = types.InlineKeyboardMarkup(row_width=3)
        item1 = types.InlineKeyboardButton(text="–ù–∞—Å—Ç—É–ø–Ω–∞ >>", callback_data='nastepna')
        item2 = types.InlineKeyboardButton(text="–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É", callback_data='zayavka')
        inline_markup.add(item1, item2)
        bot.send_message(message.chat.id, vac, parse_mode='html', reply_markup=inline_markup )

        print(vac)

    elif message.text == '–í–∞–∂–ª–∏–≤—ñ –Ω–æ–≤–∏–Ω–∏ üíº':
        nowinki = open('nowiny.txt').read()
        bot.send_message(message.chat.id, nowinki)
    elif message.text == '–•–æ—á—É –∑–∞–ª–∏—à–∏—Ç–∏ —Å–≤–æ—ó –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ ‚òéÔ∏è':

        def kolo(message):

            name1 = str(message.text)
            sold = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –±—É–¥—å-–ª–∞—Å–∫–∞ —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ", reply_markup=otmena)
            open('imie.txt', 'a').write(str(message.text))
            bot.register_next_step_handler(sold, koko)
        def koko(message):
            nb = str(message.text)
            solv = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –±—É–¥—å-–ª–∞—Å–∫–∞ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")
            open('nazwisko.txt', 'a').write(str(message.text))
            bot.register_next_step_handler(solv, finale)
        def finale(message):
            open('nr_telefonu.txt', 'a').write(str(message.text))

            conn = sqlite3.connect('database.db')
            c = conn.cursor()
            f = open('imie.txt').read()
            k = open('nazwisko.txt').read()

            l = open('nr_telefonu.txt').read()

            c.execute('INSERT INTO Clients(Imie, Nazwisko, Nr_telefonu) VALUES(?, ?, ?)', [f, k, l])

            conn.commit()
            c.execute('SELECT * FROM Clients')
            result1 = c.fetchall()
            print(result1)
            f1 = open('imie.txt', 'w')

            k1 = open('nazwisko.txt', 'w')

            l1 = open('nr_telefonu.txt', 'w')

            conn.close()


            bot.send_message(message.chat.id, "–î—è–∫—É—î–º–æ, –º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –∑–∞–¥–∑–≤–æ–Ω–∏–º–æ –¥–æ –í–∞—Å")

        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –±—É–¥—å-–ª–∞—Å–∫–∞ —Å–≤–æ—î —ñ–º'—è")
        bot.register_next_step_handler(message, kolo)
    elif message.text == '–ö–æ–Ω—Ç–∞–∫—Ç–∏ üì≤':
        bot.send_message(message.chat.id, "–ù–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏:\n +48530751503 –í–∞—Å–∏–ª–∏–Ω–∞\n +48530209245 –ú–∞—Ä—ñ—è\n +48535477662 –í–ª–∞–¥–∏—Å–ª–∞–≤\n +48535624311 –í—ñ–∫—Ç–æ—Ä—ñ—è\n")

    elif message.text == '–ü–æ–ø—É–ª—è—Ä–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è üîì':
        pytania = types.InlineKeyboardMarkup(row_width=1)
        item1 = types.InlineKeyboardButton(text="–í–∞—à—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ?", callback_data='bezkos')
        item2 = types.InlineKeyboardButton(text="–•—Ç–æ –∑–≤—ñ–ª—å–Ω–µ–Ω–∏–π –≤—ñ–¥ –æ–±—Å–µ—Ä–≤–∞—Ü—ñ—ó?", callback_data='obserwacja')
        item3 = types.InlineKeyboardButton(text="–í–∏ –Ω–∞–¥–∞—î—Ç–µ –∂–∏—Ç–ª–æ –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –æ–±—Å–µ—Ä–≤–∞—Ü—ñ—ó?", callback_data='zhytlo')
        item4 = types.InlineKeyboardButton(text="–ß–∏ —Ä–æ–±–∏—Ç–µ –≤–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –≤—ñ–∑–∏?", callback_data='visa')
        item5 = types.InlineKeyboardButton(text="C—ñ–º–µ–π–Ω—ñ –ø–∞—Ä–∏ –∂–∏–≤—É—Ç—å –æ–∫—Ä–µ–º–æ?", callback_data='simejni')
        item6 = types.InlineKeyboardButton(text="–ß–∏ –º–æ–∂—É —è –∑—Ä–æ–±–∏—Ç–∏ –∫–∞—Ä—Ç—É –ø–æ–±—É—Ç—É, –ø—Ä–∞—Ü—é—é—á–∏ –Ω–∞ –≤–∞—à–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ—è—Ö?", callback_data='kp')
        item7 = types.InlineKeyboardButton(text="–•–æ—á—É –∑–∞–¥–∞—Ç–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è", callback_data='swoje')
        pytania.add(item1, item2, item3, item4, item5, item6, item7)

        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å",  parse_mode='html', reply_markup=pytania)

    elif message.text == '–û—Ö–æ—Ä–æ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö(RODO) üìê':

        klauzula = open('klauzula.txt').read()
        bot.send_message(message.chat.id, klauzula)
    else:
        bot.send_message(message.chat.id, "–ë—É–¥—å-–ª–∞—Å–∫–∞, –∫–æ—Ä–∏—Å—Ç—É–π—Ç–µ—Å—å –∫–ª–∞–≤—ñ—à–∞–º–∏:)")

@bot.callback_query_handler(func=lambda call:True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'otmenit':
                welcome(call.message)

            elif call.data == 'bezkos':
                bot.send_message(call.message.chat.id, "–¢–∞–∫, –Ω–∞—à—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ.")
            elif call.data == 'obserwacja':
                kwar = open('kwarantanna.txt').read()
                bot.send_message(call.message.chat.id, kwar )
            elif call.data == 'zhytlo':
                bot.send_message(call.message.chat.id, "–¢–∞–∫, –Ω–∞–¥–∞—î–º–æ. –¶—ñ–Ω–∞ - 20 –∑–ª/–¥–æ–±–∞. 2 —Ç–∏–∂–Ω–µ–≤–∞ –æ–±—Å–µ—Ä–≤–∞—Ü—ñ—è –∫–æ—à—Ç—É–≤–∞—Ç–∏–º–µ –±–ª–∏–∑—å–∫–æ 300–∑–ª. ")

            elif call.data == 'visa':
                bot.send_message(call.message.chat.id, "–¢–∞–∫. –ú–∏ –≤–∏—Å–∏–ª–∞—î–º–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –≤ –±—É–¥—å-—è–∫–µ –º—ñ—Å—Ç–æ –£–∫—Ä–∞—ó–Ω–∏.")
            elif call.data == 'simejni':
                bot.send_message(call.message.chat.id, "–°—ñ–º–µ–π–Ω—ñ –ø–∞—Ä–∏ –∂–∏–≤—É—Ç—å —Ä–∞–∑–æ–º –≤ –∫—ñ–º–Ω–∞—Ç—ñ. –í –∫—ñ–º–Ω–∞—Ç—ñ –æ–¥–Ω–æ—á–∞—Å–Ω–æ –∂–∏–≤—É—Ç—å –¥–≤—ñ —Å—ñ–º–µ–π–Ω—ñ –ø–∞—Ä–∏. ")
            elif call.data == 'kp':
                bot.send_message(call.message.chat.id, "–¢–∞–∫, –∑–≤–∏—á–∞–π–Ω–æ.")
            elif call.data == 'swoje':
                def pytanko(message):
                    zlyszte = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –±—É–¥—å-–ª–∞—Å–∫–∞ —Å–≤—ñ–π email –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É Telegram.")
                    open('pytanko.txt', 'a').write(str('\n' + message.text))
                    bot.register_next_step_handler(zlyszte, odp)
                def odp(message):
                    bot.send_message(message.chat.id, "–î—è–∫—É—î–º–æ! –ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –º–∏ –¥–∞–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –í–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. ")
                    open('pytanko.txt', 'a').write(str('==' + message.text))
                bot.send_message(call.message.chat.id, "–ë—É–¥—å-–ª–∞—Å–∫–∞, –∑–∞–ª–∏—à—Ç–µ —Å–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç—å –í–∞–º –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ email –∞–±–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—É –±–µ—Å—ñ–¥—É Telegram")
                bot.register_next_step_handler(call.message, pytanko)
            elif call.data == 'nastepna':
                vac1 = open('vacancy/druga.txt').read()

                inlinemarkup = types.InlineKeyboardMarkup(row_width=3)
                item1 = types.InlineKeyboardButton(text="–ù–∞—Å—Ç—É–ø–Ω–∞ >>", callback_data='nastepna')
                item2 = types.InlineKeyboardButton(text="–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É", callback_data='zayavka')
                inlinemarkup.add(item1, item2)
                bot.send_message(call.message.chat.id, vac1, parse_mode='html', reply_markup=inlinemarkup)
            elif call.data == 'zayavka':
                def imia(message):
                    otmena = types.InlineKeyboardMarkup(row_width=4)
                    otmena1 = types.InlineKeyboardButton(text='–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', callback_data='otmenit')
                    otmena.add(otmena1)
                    sold = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –±—É–¥—å-–ª–∞—Å–∫–∞ —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ", reply_markup=otmena)
                    open('temporary/imie.txt', 'a').write(str('\n' + message.text))


                    bot.register_next_step_handler(sold, familija)
                def familija(message):
                    otmena = types.InlineKeyboardMarkup(row_width=4)
                    otmena1 = types.InlineKeyboardButton(text='–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', callback_data='otmenit')
                    otmena.add(otmena1)
                    bolt = bot.send_message(message.chat.id, "–°–∫—ñ–ª—å–∫–∏ –í–∞–º –ø–æ–≤–Ω–∏—Ö —Ä–æ–∫—ñ–≤?", reply_markup=otmena)
                    open('temporary/sirname.txt', 'a').write(str('\n' + message.text))
                    f_read = open('temporary/imie.txt')
                    #last_line = f_read.readlines()[-1]
                    #print(last_line)
                    bot.register_next_step_handler(bolt, age)
                def age(message):
                    otmena = types.InlineKeyboardMarkup(row_width=4)
                    otmena1 = types.InlineKeyboardButton(text='–í—ñ–¥–º—ñ–Ω–∏—Ç–∏', callback_data='otmenit')
                    otmena.add(otmena1)
                    golt = bot.send_message(message.chat.id, "–ß–∏ –í–∏ –∑–∞—Ä–∞–∑ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ü–æ–ª—å—â—ñ?", reply_markup=otmena)
                    open('temporary/lat.txt', 'a').write(str('\n' + message.text))
                    bot.register_next_step_handler(golt, dok)
                def dok(message):
                    variables = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                    karta = types.KeyboardButton("Karta pobytu")
                    wiza = types.KeyboardButton("Wiza sezonowa(6 –º—ñ—Å—è—Ü—ñ–≤)")
                    dlug = types.KeyboardButton("Wiza wojew√≥dzka(12 –º—ñ—Å—è—Ü—ñ–≤)")
                    bezwiz = types.KeyboardButton("Ruch bezwizowy")
                    variables.add(karta, wiza, dlug, bezwiz)
                    doku = bot.send_message(message.chat.id, "–Ø–∫—ñ —É –í–∞—Å –¥–æ–∫—É–º–µ–Ω—Ç–∏?", parse_mode='html', reply_markup=variables)
                    open('temporary/czypolska.txt', 'a').write(str('\n' + message.text))
                    bot.register_next_step_handler(doku, prac)
                def prac(message):

                    zeszla = bot.send_message(message.chat.id, "–°–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –í–∏ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ –ø—Ä–∞—Ü—é–≤–∞–ª–∏ —É –º–∏–Ω—É–ª–æ–≥–æ —Ä–æ–±–æ—Ç–æ–¥–∞–≤—Ü—è(–¥–Ω—ñ–≤)?")
                    open('temporary/dokumenty.txt', 'a').write('\n' + str(message.text))
                    bot.register_next_step_handler(zeszla, tel)
                def tel(message):
                    telef = bot.send_message(message.chat.id, "–ó–∞–ª–∏—à—Ç–µ –±—É–¥—å-–ª–∞—Å–∫–∞ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. \n –ú–∏ —Å–∫–æ—Ä–æ —Å–∫–æ–Ω—Ç–∞–∫—Ç—É—î–º–æ—Å—å –∑ –í–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π:) ")
                    open('temporary/zeszla_praca.txt', 'a').write('\n' + str(message.text))
                    bot.register_next_step_handler(telef, finalic)
                def finalic(message):
                    bot.send_message(message.chat.id, "–î—è–∫—É—î–º–æ –∑–∞ –í–∞—à —ñ–Ω—Ç–µ—Ä–µ—Å! –ú–∏ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É—î–º–æ –í–∞—à—ñ –¥–∞–Ω—ñ —ñ —Å–∫–æ—Ä–æ –∑–≤—è–∂–µ–º–æ—Å—å –∑ –í–∞–º–∏!")
                    open('temporary/numer_telefon.txt', 'a').write('\n' + str(message.text))
                    connection = sqlite3.connect('database.db')
                    c = connection.cursor()
                    open('date.txt', 'a').write('\n' + str(message.date))
                    a1 = open('temporary/imie.txt')
                    a1_last = a1.readlines()[-1]
                    b1 = open('temporary/sirname.txt')
                    b1_last = b1.readlines()[-1]
                    c1 = open('temporary/lat.txt')
                    c1_last = c1.readlines()[-1]
                    d1 = open('temporary/czypolska.txt')
                    d1_last = d1.readlines()[-1]
                    f1 = open('temporary/dokumenty.txt')
                    f1_last = f1.readlines()[-1]
                    g1 = open('temporary/zeszla_praca.txt')
                    g1_last = g1.readlines()[-1]
                    h1 = open('temporary/numer_telefon.txt')
                    h1_last = h1.readlines()[-1]
                    c.execute('INSERT INTO Analiza(Imie, Nazwisko, Ile_lat, Czy_w_polsce, Dokumenty, Zeszla_praca, Nr_telefonu) VALUES(?, ?, ?, ?, ?, ?, ?)', [a1_last, b1_last, c1_last, d1_last, f1_last, g1_last, h1_last])

                    connection.commit()
                    connection.close()


                bot.send_message(call.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –±—É–¥—å-–ª–∞—Å–∫–∞ —Å–≤–æ—î —ñ–º'—è")
                bot.register_next_step_handler(call.message, imia)
    except Exception as e:
            print(repr(e))

